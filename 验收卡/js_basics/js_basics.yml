quiz:
  - content: "以下代码，输出正确的是:"
    options:
      - >
        ```
        var a = 1;
        var b = "2";
        a + b //输出12
        ```
      - >
        ```
        var a = 1;
        var b = "2";
        a + b //输出3
        ```
      - >
        ```
        var a = "-1";
        var b = 2;
        - a + b //输出3
        ```
      - >
        ```
        var a = 1;
        var b = 2;
        a + b //输出12
        ```
    answer: [1, 3]
  - content: "下列函数中，能输出如下字符的有:" >
      ```
      Hello World!
      What a good day!
      ```
    options:
      - >
        ```
        function sayHello(){
            return `
                  Hello World!
                  What a good day!`;
        }
        ```
      - >
        ```
        function sayHello(){
            return 'Hello World!\nWhat a good day!';
        }
        ```
      - >
        ```
        function sayHello(){
            var newLine = '\n';
            return 'H'.concat('ello World!', newLine, 'What a good day!');
        }
        ```
      - >
        ```
        function sayHello(){
            var helloWorld = "Hello World!";
            var goodDay = "What a good day!";
            helloWorld.concat('\n',goodDay);
            return helloWorld;
        }
        ```
    answer: [2, 3]
  - content: "以下输出正确的有:"
    options:
      - >
        ```
        var str = "123456";
        str.slice(1);
        str //输出3456
        ```
      - >
        ```
        var str = "123456";
        str.slice(1); //输出3456
        ```
      - >
        ```
        var str = "123456";
        str.substring(1);
        str //输出123456
        ```
      - >
        ```
        var str = "123456";
        str.substring(1);
        str //输出2345
        ```
    answer: 3
  - content: "以下函数，能够实现求数字数组collection所有元素之和的有:"
    options:
      - >
        ```
        function sum(collection){
            return collection.reduce((acc, current) => acc + current, 1);
        }
        ```
      - >
        ```
        function sum(collection){
            let sum = 0;
            for(i = 0; i < collection.length; i++){
                sum += collection[i];
            }
            return sum;
        }
        ```
      - >
        ```
        function sum(collection){
            let sum = 0;
            for(num in collection){
                sum += num; 
            }
            return sum;
        }
        ```
      - >
        ```
        function sum(collection){
            if(collection.length === 0) return 0;
            return sum(collection.slice(1)) + collection[0];
        }
        ```
    answer: [2, 4]
  - content: "以下函数，能够找出数字数组collection中大于0的元素的有:"
    options:
      - >
        ```
        function positiveNumber(collection){
            return collection.filter((item) => item > 0);
        }
        ```
      - >
        ```
        function positiveNumber(collection){
            let positive = [];
            for(i = 0; i < collection.length; i++){
                if (collection[i] <= 0)  return;
                positive.push(collection[i]);
            }
            return positive;
        }
        ```
      - >
        ```
        function positiveNumber(collection){
            let positive = 0;
            for(item in collection){
                positive.push(item);
            }
            return positive;
        }
        ```
      - >
        ```
        function positiveNumber(collection){
            for(i = 0; i < collection.length; i++){
                if (collection[i] <= 0) {
                    collection = collection.slice(0, i).concat(collection.slice(i + 1));
                }
            }
            return collection;
        }
        ```
    answer: 1
  - content: "以下函数，能将数字数组中所有元素乘2的有:"
    options:
      - >
        ```
        function double(collection){
            return collection.map((item) => item * 2);
        }
        ```
      - >
        ```
        function double(collection){
            for(i = 0; i < collection.length; i++){
                collection[i] = collection[i] * 2;
            }
            return collection;
        }
        ```
      - >
        ```
        function double(collection){
            let doubleCollection = 0;
            for(item in collection){
                doubleCollection.push(item * 2);
            }
            return doubleCollection;
        }
        ```
      - >
        ```
        function double(collection){
            if(collection.length === 1) return [collection[0] * 2];
            return positiveNumber(collection.slice(0,1)).concat(positiveNumber(collection.slice(1)));
        }
        ```
    answer: [1, 2]
  - content: "运行完下列代码，输出是:" >
      ```
      function f(collection) {
          return collection.reduce((acc, current) => {
              if (acc.find(a => a.key == current)){
                  return acc;
              }
              acc.push({key: current, value: collection.filter(c => c == current)});
              return acc;
          }, [])
      }
      var col = [
          1, 1, 1, 1,
          2, 2,
          '1', '1',
          '2'];
      console.log(f(col));
    ```
    options:
      - >
        ```
        [
            {key: 1, value:[1, 1, 1, 1]},
            {key: 2, value:[2, 2]},
            {key: '1', value:['1', '1']},
            {key: '2', value:['2']}
        ]
        ```
      - >
        ```
        [
            {key: 1, value:[1, 1, 1, 1, '1', '1']},
            {key: 2, value:[2, 2, '2']}
        ]
        ```
      - >
        ```
        [
            {key: 1, value: 4},
            {key: 2, value: 2},
            {key: '1', value: 2},
            {key: '2', value: 1}
        ]
        ```
      - >
        ```
        [
            {key: 1, value: 6},
            {key: 2, value: 3},
        ]
        ```
    answer: 2
  - content: "运行完下列代码，输出是:" >
      ```
      function f(collection) {
          return collection.reduce((acc, current) => {
              if (acc.includes(current)) return acc;
              acc.push(current);
              return acc;
          }, [])
      }
      console.log(f([1,2,3,3,4,2,5,6,3,44,5]))
      ```
    options:
      - "[1, 2, 3, 4, 5, 6, 44]"
      - "[1, 2, 3, 4, 5, 6]"
      - "[1, 4, 6, 44]"
      - "[2, 3, 5]"
    answer: 1
  - content: "运行完下列代码，输出是:" >
      ```
      function f(collectionA, collectionB) {
          return collectionA.filter(a => collectionB.includes(a));
      }
      var a = [1, 2, 3, 4, 5, 6, 7, 8];
      var b = ['a', 'b', 6, 'd', 7, 'e', 1];
      console.log(f(a, b)); 
      ```
    options:
      - "[1, 2, 6, 7]"
      - "[6, 2, 7, 1]"
      - "[7, 1, 6]"
      - "[1, 6, 7]"
    answer: 4
  - content: "以下方式可为对象objectA正确添加属性name的有:"
    options:
      - "objectA.name = 'a';"
      - "objectA[name] = 'a';"
      - "objectA['name'] = 'a';"
      - "objectA = {name: 'a'};"
    answer: [1, 3]
  - content: "以下方式可可以获取objectA的所有属性的值的有:"
    options:
      - "objectA.map((key, value) => value);"
      - "Object.values(objectA);"
      - "Object.keys(objectA);"
      - >
        ```
        function f(objectA){
          let result = [];
          for(item in objectA) {
              result.push(objectA[item]);
          }
          return result;
        } 
        ```
    answer: [2, 4]
  - content: "以下对lambda表达式描述正确的有:"
    options:
      - "lambda表达式可以存储在变量中"
      - "lambda表达式可以作为函数参数进行传递"
      - "lambda表达式可以作为函数的返回值"
      - "lambda表达式可以作为对象的属性值"
    answer: [1, 2, 3, 4]
  - content: "对下列表达式,描述正确的有:" >
      ```
      (a, b) => a + b
      ```
    options:
      - "表达式接受两个参数"
      - "表达式接受一个对象作为参数，该对象有两个属性，分别是a和b"
      - "表达式没有返回值"
      - "表达式返回值为a与b的和"
    answer: [1, 4]
  - content: "以下对函数链式调用的描述，正确的有:"
    options:
      - "函数链中，所有函数的参数和返回值都是同一种数据类型"
      - "函数链中，后一个函数的输入是前一个函数的输出"
      - "[1,2,3].foreach(...).map(...)就是一个函数链.(...代表省略具体使用方式)"
      - "只有数组才能作为函数链的第一个传入参数"
    answer: 2
  - content: "对下列表达式,描述正确的有:" >
      ```
      [1, 2, 3, 4, 5, 6].map(i => i * 2).filter(i => i > 3).reduce((a, b) => a + b);
      ```
    options:
      - "表达式不能正常执行"
      - "表达式的执行结果为40"
      - "表达式没有返回值"
      - "表达式表达式的执行结果为42"
    answer: 2
  - content: 关于javascript的函数reduce,你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: 关于javascript的函数filter,你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: 关于javascript的函数map,你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: 关于javascript的模版字符串,你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: 关于箭头函数，你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: 关于将函数作为参数,你了解多少
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: "请用概念图解释函数group的含义" 
