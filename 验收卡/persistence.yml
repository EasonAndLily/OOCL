quiz:
  - content: >
      SpringBoot中在application.yml配置spring.jpa.hibernate.ddl-auto的不同值说法正确的
    options:
      - "validate：加载hibernate时，验证创建数据库表结构"
      - "create：每次加载hibernate，重新创建数据库表结构"
      - "create-drop：加载hibernate时创建，退出时删除表结构"
      - "update： 加载hibernate自动更新数据库结构"
    answer: 1,2,3,4
  - content: > 
      以下哪些注解标记一个POJO类为JPA实体类
    options:
      - "@Data"
      - "@Entity"
      - "@Table"
      - "@Object"
    answer: 2 
  - content: > 
      在JPA实体类声明某个字段值是不可重复的, 应该使用以下哪一个注解
    options:
      - "@Column" 
      - "@Unique" 
      - "@Column(unique = true)" 
      - "@Column(unique = false)" 
    answer: 3
  - content: >
      ```
        以下是User JPA实体name字段的限制需求
        - 字段不能为null
        - 字段不能重复
        - 字段长度为500
      ```
      满足以上定义name字段的要求，需要使用下面哪一项注解
    options:
      - "@Column(nullable = false, unique = true, length = 500)"
      - "@Column(nullable = false, unique = false, length = 500)"
      - "@Column(nullable = true, unique = false, length = 500)"
      - "@Column(length = 500) @Nonnull @Unique"
    answer: 1
  - content: > 
      对于实体类User(id , name, age), 哪些方法在JpaRepository中自动生成 
    options:
      - "findUserById"
      - "findByIdAndName"
      - "findById"
      - "findName"
    answer: 2, 3 
  - content: > 
      对于实体类Car（id，model，year），哪些JPA查询对于获取所有宝马汽车都有效？    
    options:
      - "from Car c where c.model=:param"
      - "select * from Car c where c.model=:param1"
      - "select c from Car c where c.model=\"bmw\""
      - "select c from Car c where c.model=:param1"
    answer: 2 
  - content: > 
      哪个注释将JPA Query参数绑定到方法参数？    
    options:
      - "@Param"
      - "@QueryParam"
      - "@RequestParam"
      - "@QueryParameter"
    answer: 1 
  - content: >
      在UserRespository中创建根据name字段删除指定记录的函数,以下函数名正确的是
    options:
      - "deleteWithName"
      - "deleteOfName"
      - "deleteForName"
      - "deleteByName"
    answer: 4
  - content: >
      在UserRespository中创建一个查询函数,查询要求如下 
      ```
       - 按年龄字段升序 
       - 按姓名字段过滤
      ```
      下面哪一项的函数名定义正确
    options:
      - "queryByNameOrderByAge"
      - "queryByNameAndOrderByAge"
      - "findOrderByAgeByName"
      - "findByNameOrderByAge"
    answer: 4
  - content:>
      在UserRespository中创建一个查询函数,查询要求如下 
      ```
        - 按name和email字段过滤
        - 忽略大小写
        - 使用DISTINCT标识
      ```
      下面哪一项的函数名定义正确
    options:
      - "findDistinctUserByNameOrEmailAllIgnoreCase"
      - "findUserByNameOrEmailAllIgnoreCaseDistinct"
      - "findAllIgnoreCaseUserByNameOrEmailDistinct"
      - "findUserDistinctByNameOrEmailAllIgnoreCase"
    answer: 1
  - content: >
      ```
        @Repository
        public interface CompanyRepository extends JpaRepository<Company, Long> {

            @Query(value = "update Company c set c.companyName = :#{#company.companyName} where c.id = :#{#company.id}")
            int updateCompany(@Param("company") Company company);
        }
      ```
      以上代码```updateCompany```函数运行会出现异常，缺少哪一项注解
    optoins:
      - "@Update"
      - "@Modify"
      - "@Modifying"
      - "@Updated"
    answer: 3 
  - content: >
      使用Sort类， 以下哪一项是有效的排序
    options:
      - "new Sort(\"name\")"
      - "new Sort(\"LENGTH(name)\")"
      - "JpaSort.unsafe(\"LENGTH(name)\")"
      - "new Sort(\"fn_len\")"
    answer: 1,3,4
  - content: >
      Repository 查询函数支持的返回值类型有
    options:
      - "void"
      - "List<T>"
      - "Page<T>"
      - "Integer"
    answer: 1,2,3
  - content: >
      ```
      @Entity
      public class Address {
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          private Long id;

          private street;

          private city;
      }
      ```
      ```
      @Entity
      public class User {
          
          @Id
          @GeneratedValue(strategy = GenerationType.AUTO)
          private Long id;
          //... 
      
          private Address address;
      
          // ... getters and setters
      }
      ```
      每个用户只能拥有一个地址，那么在User实体的address属性上使用什么注解可以建立关系
    options:
      - "@OneToOne(cascade = CascadeType.ALL)"
      - "@OneWithOne(name = \"address_id\", referencedColumnName = \"id\")"
      - "@OneByOne(cascade = CascadeType.ALL)"
      - "@LeftJoin(name = \"address_id\", referencedColumnName = \"id\")"
    answer: 1
  - content: >
      ```
      @Entity
      class Address {
          @OneToOne(cascade = CASCADETYPE.ALL)
          @JoinColumn(unique = true)
          private User user;
      }

      @Entity
      public class User {
          @OneToOne(cascade = CASCADETYPE.ALL, mappedBy = "user")
          private BlogMetaInfo blogMetaInfo; 
      }

      Address address = new Address();
      // initialize address 
      // ...

      User user = new User();
      // initialize address
      // ...

      user.setBlogMetaInfo(address);
      userRepository.save(user);
      ```
      执行以上代码后，blogMetaInfo表的user_id字段有值吗
    options:
      - "有值"
      - "无值"
    answer: 2
  - content: >
      ```
      @Entity
      class Comment {
          private Blog blog;
        
          // ...
      }
      ```

      ```
      @Entity
      class Blog {
          
          // ...
      }
      ```
      一个Blog会有多个Comment，那么Comment中blog属性应该使用什么关系注解 
    options:
      - "OneToMany" 
      - "ManyToOne" 
      - "OneToMore" 
      - "MoreToOne" 
    answer: 2
  - content: >
      ```
      @Entity
      class Comment {
          // ...
      }
      ```

      ```
      @Entity
      class Blog {
          private List<Comment> comments;
          // ...
      }
      ```
      一个Blog会有多个Comment，那么Blog中comments应该使用什么关系注解 
    options:
      - "ManyToOne" 
      - "OneToMore" 
      - "MoreToOne" 
      - "OneToMany" 
    answer: 4 
  - content: >
      @OneToMany注解中使用懒加载应该如何设置
    options:
      - "@OneToMany(fetch = FetchType.EAGER)"
      - "@OneToMany(fetch = FetchType.FETCH)"
      - "@OneToMany(fetch = FetchType.LAZY)"
      - "@OneToMany(fetch = FetchType.WAIT)"
    answer: 3
  - content: >
      ```
      @Entity
      public class Blog {
          private List<Tag> tags = new ArrayList<Tag>();
      }

      @Entity
      public class Tag {
          private List<Blog> blogs = new ArrayList<Blog>();
      }
      ```
      一个Blog有多个Tag, 一个Tag可以用于多个Blog，使用什么关系注解
    options:
      - "@ManyToMany"
      - "@OneToMany"
      - "@MoreToMore"
      - "@ManyToOne"
    answer: 1
  - content: >
      如果两张表是以主键关联的，比如Person表主键是id，Address表主键是address_id，以下注解正确的是
    options:
      - "JoinColumn(name = \"id\", referencedColumnName=\"address_id\")"
      - "JoinColumn(referencedColumnName = \"id\", name=\"address_id\")"
    answer: 1
  - content: >
      以下对Flyway描述正确的是：
    options:
      - "Flyway可以独立于应用实现管理并跟踪数据库的变更"
      - "Flyway根据自己的约定，不需要复杂的配置就可以实现数据的迁移"
      - "Flyway只支持SQL脚本"
      - "Flyway只支持Java代码"
    answer: 1,2
  - content: >
      选择以下Flyway可以读取的SQL脚本正确的文件名命名
    options: 
      - "V20190630103512__Base_version.sql"
      - "V1__Base_version.sql"
      - "V1#Base_version.sql"
      - "V1@create_tables.sql"
    answer: 1,2 
 - content: > 
      对于Spring JPA你掌握的程度是? 
    options: 
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
 - content: > 
      对于Spring JPA中的注解你掌握的程度是? 
    options: 
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
 - content: > 
      对于Flyway你掌握的程度是? 
    options: 
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
  - content: >
      请绘制Spring JPA的概念图


