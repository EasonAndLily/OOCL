quiz:
  - content: "在软件工程中，TDD指的是:"
    options:
      - "Test-Driven Development"
      - "To Do Development"
      - "Technical Data Digest"
      - "Time Division Duplex"
    answer: 1
  - content: "TDD的含义是："
    options:
      - "先写程序后写测试的开发方法"
      - "先写测试后写程序，即“测试先行”"
      - "用单元测试的方法写测试"
      - "不需要测试的开发"
    answer: 2
  - content: "下面属于TDD的优势的是："
    options:
      - "Much less debug time"
      - "Code proven to meet requirements"
      - "Near zero defects"
      - "Shorter development cycles"
    answer: 1,2,3,4
  - content: "Intellij IDEA中给一个类创建其对应的测试类的快捷键是："
    options:
      - "ctrl/cmd + shift + t"
      - "opt + shift + t"
      - "ctrl/cmd + t"
      - "opt + t"
    answer: 1
  - content: "Intellij IDEA中运行测试的快捷键是："
    options:
      - "ctrl/cmd + alt + r"
      - "ctrl/cmd + r"
      - "ctrl/cmd + d"
      - "ctrl + r"
    answer: 1
  - content: "Intellij IDEA中运行已经执行过的测试的快捷键是："
    options:
      - "ctrl/cmd + alt + r"
      - "ctrl/cmd + r"
      - "ctrl/cmd + d"
      - "ctrl + r"
    answer: 4
  - content: "关于junit测试的注解，如果需要一个方法是测试方法，需要下面那个注解："
    options:
      - "@Test"
      - "@BeforeEach"
      - "@BeforeAll"
      - "@AfterAll"
    answer: 1
  - content: "关于junit测试的注解，如果需要一个方法在所有测试之前执行，需要下面那个注解："
    options:
      - "@Test"
      - "@BeforeEach"
      - "@BeforeAll"
      - "@AfterAll"
    answer: 3
  - content: "关于junit测试的注解，如果需要一个方法在每个测试方法之前执行，需要下面那个注解："
    options:
      - "@Test"
      - "@BeforeEach"
      - "@BeforeAll"
      - "@AfterAll"
    answer: 2
  - content: "以下对单元测试，不正确的说法是："
    options:
      - "单元测试的主要目的是针对编码过程中可能存在的各种错误"
      - "单元测试一般是由程序开发人员完成的"
      - "单元测试是一种不需要关注程序结构的测试"
      - "单元测试属于白盒测试的一种"
    answer: 3
  - content: "以下对单元测试编写的原则，正确的说法是："
    options:
      - "每个单元测试必须仅仅测试一个最小的业务单元，符合单一职责原则"
      - "单元测试之间应当彼此独立，不能互相依赖"
      - "一个好的单元测试必须从命名到业务实现必须要非常表意，具有很强的可读性，让人一看就知道测试的逻辑意义"
      - "应当以完成测试覆盖率为目去编写单元测试"
    answer: 1,2,3
  - content: "对于测试程序的一些命名规则，以下说法正确的一项是："
    options:
      - "测试类的命名只要符合Java类的命名规则就可以了"
      - "测试类的命名一般要求以Test打头，后接类名称，如：TestPerson"
      - "测试类的命名一般要求以Test结尾，前接类名称，如：PersonTest"
      - "测试类中的方法都是以testXxx（）形式出现"
    answer: 3
  - content: "对于测试类中方法的命名规则，以下说法不正确的一项是："
    options:
      - "测试方法名应当贴切表达测试的意图"
      - "测试方法名必须符合Java方法命令规范"
      - "测试方法名可以用should_return..when..的形式表达"
      - "测试方法名越短越简洁越好，并且应当加以注释"
    answer: 4
  - content: "对于测试类中方法的命名规则，以下说法不正确的一项是："
    options:
      - "测试方法名应当贴切表达测试的意图"
      - "测试方法名必须符合Java方法命令规范"
      - "测试方法名可以用should_return..when..的形式表达"
      - "测试方法名越短越简洁越好，并且应当加以注释"
    answer: 4
  - content: "关于测试金字塔，下面说法正确的是："
    options:
      - "对于测试金字塔，越往上，运行越快"
      - "对于测试金字塔，最底层的是运行越快的单元测试"
      - "对于测试金字塔，应当写更多的集成测试"
      - "对于测试金字塔，集成测试位于最底层，并且执行很快"
    answer: 2
  - content: >
      ```
      public class HelloWorldTest {
        @BeforeAll
        static void initTestEnv() {}
        @BeforeEach
        void initEveryMethod() {}
        @AfterAll
        static void destroyTestEnv() {}
        @Test
        public void hello_world_test() {}
      }
      ```

      运行上面测试，正确的执行顺序是：
    options:
      - "initTestEnv initEveryMethod hello_world_test destroyTestEnv"
      - "initEveryMethod initTestEnv hello_world_test destroyTestEnv"
      - "hello_world_test initTestEnv initEveryMethod destroyTestEnv"
      - "initTestEnv hello_world_test initEveryMethod destroyTestEnv"
    answer: 1
- content: >
      ```
      public static int getFactorial(int number) {
          if (number < 0) {
              throw new IllegalArgumentException();
          }
          if (0 == number || 1 == number) {
              return 1;
          }
          
          return number * getFactorial(number - 1);
      }
      ```

      对于上面求阶乘的方法，如果要给其写单元测试，则正确的是：
    options:
      - "应当测试正常的业务逻辑，比如3的阶乘为6"
      - "应当测试边界值，比如1的阶乘为0"
      - "应当测试0的阶乘，抛出异常"
      - "应当测试负数，抛出异常"
    answer: 1,2,3,4
  - content: >
      ```
      if (0 == retCode) {
        sendMessage("A001", "Process Success", outResult);
      } else {
        sendMessage("A001", "Process Failure", outResult);
      }
      ```
      上面代码，从代码重构(Refactor Code)的角度，下面说法正确的是：
    options:
      - "该代码表意清楚，无懈可击"
      - "可以用三元表达式来判断具体的message"
      - "可以这样优化：sendMessage("A001", messageFromRetCode(retCode), outResult);"
      - "该代码存在魔法数字"
    answer: 2,3,4
  - content: >
      ```
      // check user whether has credit card
      boolean hasCreditCard(User user) {
          if (user.hasCard) {
              return true;
          } else {
              return false;
          }
      }
      ```

      对上面方法，从代码整洁(Clean Code)的角度，下面说法错误的是：
    options:
      - "该方法根本没有存在的必要"
      - "该方法的if语句可以更加简洁"
      - "该方法的注释无任何意义"
      - "该方法逻辑清晰，代码简洁，符合clean code的规范"
    answer: 4
  - content: >
    要求：假如一家商场对商品正在进行打折，价格在 100 - 200 之间的打八折，其它的按原价出售
    第一种写法：
    ```
    function calculatePrice(price){
      var result;
      if (price >= 100 && price < 200) {
        result = price * 0.8;
      } else {
        result = price;
      }
      return result;
    }
    ```
    第二种写法：
    ```
    function calculatePrice(price) {
      let result;
      if (isDiscount(price)) {
        result = discount(price);
      } else {
        result = price;
      }
      return result;
    }
    function isDiscount(price) {
      return price >= 100 && price < 200;
    }
    function discount(price) {
      return price * 0.5;
    }
    ```
    第三种写法：
    ```
    function calculatePrice(price) {
      if (isDiscount(price)) {
        return discount(price);
      } else {
      return price;
      }
    }
    function isDiscount(price) {
      return price >= 100 && price < 200;
    }
    function discount(price) {
      return price * 0.5;
    }
    ```
    从代码整洁(Clean Code)的角度来看，上面三种写法那种更好：
    options:
      - 1
      - 2
      - 3
      - 都还行
    answer: 3
  - content: >
      ```
      public class Account {
          public List<String> getPlans(String accountId) { 
            //some implements
          }
      }
      public class StockPlan {
          private Account account;
          public StockPlan(Account account) {
              this.account = account;
          }
          public List<String> getPlans(String accountId)
              //some implements
              return account.getPlans(accountId);
          }
      }
      ```
      如果需要测试方法getPlans，下面说法正确的是：
    options:
      - "可以直接测试getPlans，不需要mock account对象"
      - "在测试getPlans方法时，需要mock account的对象，但不需要mock getPlans方法"
      - "在测试getPlans方法是，需要mock account对象，也需要mock getPlans方法"
      - "用Mockito框架可以实现mock account对象"
    answer: 3,4
  - content: > 用TDD的方式来实现一个加法运算，会用到下面的步骤，正确的组合是：
  1. 写一个测试，输入为两个参数，输出为两个数的和。
  2. 运行该测试，发现测试失败。
  3. 编写仅仅使得该测试成功的实现。
  4. 写另外一个测试，输入为两个参数，输出为两个数的和，运行测试。
    options:
      - "1234"
      - "4213"
      - "2314"
      - "3412"
    answer: 1

  - content: "对于TDD，您对它的掌握程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
    answer:
  - content: "对于Junit，您对它的掌握程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
    answer:
  - content: "对于Mockito，您对它的掌握程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
    answer:
  - content: "关于测试金字塔，您对其掌握的程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
  - content: "关于重构，您对其掌握的程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
    answer:
  - content: "关于代码中常见的坏味道(无效的注释，变量名表意不清，方法名命令不合理等)，您对其掌握的程度是："
    options:
      - 听说过，但不了解
      - 用过但并不理解概念
      - 理解概念但没练习过
      - 理解概念并在练习中使用过
      - 知道为何要在练习中使用此概念，并明白在练习中如何使用它
      - 能够识别该技术的主要应用场景或者解决的问题，并能熟练使用
    answer:
  - content: "请画出TDD的流程图，并提交"
  - content: "请画出Unit Test和Refactor code的关系图，并提交"
