quiz:
  - content: > 
      以下哪一项不是REST支持的HTTP方法?
    options:
      - "GET"
      - "POST"
      - "REMOVE"
      - "PATCH"
    answer: 3
  - content: > 
      Http Code 404描述正确的是 
    options:
      - "用户发出的请求针对的是不存在的记录"
      - "表示用户没有权限"
      - "表示用户得到授权"
      - "用户请求的格式不可得"
    answer: 1
  - content: > 
      基于Restful规范, 对PUT描述不正确的是 
    options:
      - "PUT操作是幂等的"
      - "PUT更新某一资源，则必须要更新资源的全部属性"
      - "PUT创造新资源"
      - "PUT请求返回改变的属性"
    answer: 3,4
  - content: > 
      ```

      GET /zoos/ID/animals
      ```
      以下对上述URI描述正确的是
    options:
      - "列出某个指定动物园的所有动物"
      - "列出所有动物园的所有动物"
      - "列出所有动物园的指定动物"
      - "列出某个指定动物园的指定动物"
    answer: 1 
  - content: > 
      服务发生错误的状态码是 
    options:
      - "400"
      - "401"
      - "502"
      - "500"
    answer: 4
  - content: > 
      DELETE请求返回的状态码描述正确的是 
    options:
      - "200 (OK) - 删除成功，同时返回已经删除的资源"
      - "202 (No Content) - 删除请求已经被执行，但是没有返回资源"
      - "204 (Accepted) - 删除请求已经接受，但没有被立即执行"
    answer: 1
  - content: > 
      基于Restful规范, 对PATCH描述不正确的是 
    options:
      - "PATCH不是幂等的"
      - "PATCH返回更新的全部属性"
      - "PATCH用于更新资源"
      - "设计PATCH是对PUT的补充"
    answer: 4
  - content: > 
      基于Restful规范, 对PATCH描述不正确的是 
    options:
      - "PATCH不是幂等的"
      - "PATCH返回更新的部分属性"
      - "PATCH用于更新资源"
      - "PATCH设计用于完全代替PUT"
    answer: 4
  - content: > 
      设计一个URL，更新指定用户的昵称，以下设计符合Restful协议的是
    options:
      - "POST: /users/{id}"
      - "GET: /users/{id}"
      - "PATCH: /users/{id}"
      - "PUT: /users/{id}"
    answer: 3
  - content: > 
      设计一个URL，获取指定部门下指定员工信息，以下设计符合Restful协议的是
    options:
      - "GET: /departments/users/{id}/{id}/"
      - "GET: /departments/{id}/users/{id}"
      - "GET: /users/{id}/departments/{id}"
      - "GET: /department/{id}/user/{id}"
    answer: 2
  - content: > 
      设计一个URL，获取成绩排名前10的学员，以下设计符合Restful协议的是
    options:
      - "GET: /students?sortby=score&limit=10"
      - "GET: /students/score?limit=10"
      - "GET: /student?sortby=score&limit=10"
      - "GET: /students/limit/10?sortby=score"
    answer: 1
  - content: > 
      ```

      public class TodoControllerTest {}
      ```
      以上是SpringBoot中 Controller的测试类需要使用哪些注解才能运行
    options:
      - "@RunWith"
      - "@SpringBootTest"
      - "@ComponentScan"
      - "@Autowired"
    answer: 1,2
  - content: >
      @SpringBootTest注解的webEnvironment属性设置什么值会启动真实的Servlet环境
    options:
      - "WebEnvironment.MOCK"
      - "WebEnvironment.RANDOM_PORT"
      - "WebEnvironment.DEFINED_PORT"
      - "WebEnvironment.NONE"
    answer: 2,3
  - content: >
      基于Mockito的话，以下哪一个注解可以直接Mock一个类的实例并代替Spring容器中的真实实例
    options:
      - "@Bean"
      - "@MockBean"
      - "@Mock"
      - "@Component"
    answer: 2
  - content: >
      Mockito中@Mock和@MockBean的区别描述正确的是
    options:
      - "@MockBean是@Mock的替换者"
      - "@MockBean标注的类实例会替换Spring容器中相同类型的实例, 而@Mock仅仅mock了一个类实例"
      - "@Mock需要调用MockitoAnnotations.initMocks函数才能生成mock实例, 而@MockBean不需要"
      - "@Mock和@MockBean都需要调用MockitoAnnotations.initMocks函数才能生成mock实例"
    answer: 2,3
  - content: >
      以下哪几项Mockito无法支持mock
    options:
      - "final修饰的类"
      - "匿名类"
      - "接口"
      - "原始类型"
    answer: 1,2,4
  - content: 
      以下使用Mockito mock一个函数的返回值语法正确的是
    options:
      - "when(categoryRepository.save(any())).thenReturn(null)"
      - "when(categoryRepository.save(any())).return(null)"
      - "do(categoryRepository.save(any())).thenReturn(null)"
      - "do(categoryRepository.save(any())).return(null)"
    answer: 1
  - content:
      ```
      @Test
      fun testMethodRunTimes() {
          mockList.add("one")
          mockList.add("one")
          mockList.add("one")
          mockList.add("two")
          mockList.add("three")
          mockList.add("three")
          mockList.add("three")

          verify(mockList, times(1)).add("one")
      }
      ```
      以上测试是否能验证通过
    options:
      - "通过"
      - "不通过"
    answer: 2
  - content: >
      以下对```MockMvc```测试类描述正确的是:
    options:
      - "会发送真实的Http请求"
      - "测试依赖于网络环境"
      - "测试速度缓慢"
      - "直接使用网络的形式，转换到Controller的调用"
    answer: 4 
  - content: > 
      如果使用MockMvc来测试Controller,  以下代码哪一项是验证返回的Http Code是400
    options:
      - "mockMvc.perform(get(\"/todos\")).andDo(print()).andExpect(status().isOk())"
      - "mockMvc.perform(get(\"/todos\")).andDo(print()).andExpect(status().isBadRequest())"
      - "mockMvc.perform(get(\"/todos\")).andDo(print()).andExpect(status().isNotFound())"
      - "mockMvc.perform(get(\"/todos\")).andDo(print()).andExpect(status().isBadGateway())"
    answer: 2 
  - content: >
      使用MockMvc来测试Controller, 以下验证```/todo/1```接口返回Json中title属性值语法正确的是
    options:
      - "jsonPath(\"#.title\", Matchers.is(\"abc\"))" 
      - "jsonPath(\"@.title\", Matchers.is(\"abc\"))" 
      - "jsonPath(\"$.title\", Matchers.is(\"abc\"))" 
      - "jsonPath(\"&.title\", Matchers.is(\"abc\"))" 
    answer: 3
  - content: >
      你对Restful Api了解多少
    options:
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
  - content: >
      你对SpringBoot单元测试了解多少
    options:
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
  - content: >
      你对测试工具库Mockito了解多少
    options:
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
  - content: >
      你对测试工具库MockMvc了解多少
    options:
      - 没听说过
      - 听说过，但不是很清楚
      - 用过但并不理解概念
      - 理解概念但没用过
      - 理解概念并在练习中使用过
      - 理解概念并在真实项目中合理使用
  